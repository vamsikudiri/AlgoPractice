// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestCases.FeaturesAndSteps
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("EditDistance", SourceFile="FeaturesAndSteps\\EditDistance.feature", SourceLine=0)]
    public partial class EditDistanceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EditDistance.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EditDistance", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void EditDistanceWithDPTopDownApproach(string string1, string string2, string editDistance, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DynamicProgrammingTopDown"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EditDistance with DP top down approach", @__tags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given(string.Format("EditDistance input {0}, {1}", string1, string2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Then(string.Format("EditDistance should be {0}", editDistance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 0", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant0()
        {
            this.EditDistanceWithDPTopDownApproach("a", "a", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 1", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant1()
        {
            this.EditDistanceWithDPTopDownApproach("ab", "a", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 2", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant2()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "a", "2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 3", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant3()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "abc", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 4", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant4()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "ab", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 5", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant5()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "aXbc", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 6", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant6()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "abXc", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 7", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant7()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "abcX", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 8", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant8()
        {
            this.EditDistanceWithDPTopDownApproach("aXbc", "abc", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 9", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant9()
        {
            this.EditDistanceWithDPTopDownApproach("abXc", "abc", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 10", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant10()
        {
            this.EditDistanceWithDPTopDownApproach("abcX", "abc", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 11", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant11()
        {
            this.EditDistanceWithDPTopDownApproach("abcd", "abcX", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 12", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant12()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "abX", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 13", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant13()
        {
            this.EditDistanceWithDPTopDownApproach("a", "aXY", "2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 14", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant14()
        {
            this.EditDistanceWithDPTopDownApproach("ab", "YXaX", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 15", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant15()
        {
            this.EditDistanceWithDPTopDownApproach("aXYbXcY", "a", "6", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 16", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant16()
        {
            this.EditDistanceWithDPTopDownApproach("abc", "aXbYcZW", "4", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("EditDistance with DP top down approach, Variant 17", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=9)]
        public virtual void EditDistanceWithDPTopDownApproach_Variant17()
        {
            this.EditDistanceWithDPTopDownApproach("aXYZbc", "ab", "4", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
