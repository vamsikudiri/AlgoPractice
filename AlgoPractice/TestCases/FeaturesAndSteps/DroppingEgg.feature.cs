// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestCases.FeaturesAndSteps
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Dropping Egg", Description="\tNumber of eggs and number of floors are given.", SourceFile="FeaturesAndSteps\\DroppingEgg.feature", SourceLine=0)]
    public partial class DroppingEggFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DroppingEgg.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Dropping Egg", "\tNumber of eggs and number of floors are given.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AllScenariosOfDPBottomUpApproach(string eggs, string floors, string minimumNumberOfSteps, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DynamicProgrammingTopDown"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All scenarios of DP bottom up approach", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("{0}, {1} floors", eggs, floors), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.Then(string.Format("the result should {0}", minimumNumberOfSteps), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP bottom up approach, 01", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=10)]
        public virtual void AllScenariosOfDPBottomUpApproach_01()
        {
            this.AllScenariosOfDPBottomUpApproach("01", "1,2,3,4,5", "1,2,3,4,5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP bottom up approach, 02", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=10)]
        public virtual void AllScenariosOfDPBottomUpApproach_02()
        {
            this.AllScenariosOfDPBottomUpApproach("02", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP bottom up approach, 03", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=10)]
        public virtual void AllScenariosOfDPBottomUpApproach_03()
        {
            this.AllScenariosOfDPBottomUpApproach("03", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP bottom up approach, 04", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=10)]
        public virtual void AllScenariosOfDPBottomUpApproach_04()
        {
            this.AllScenariosOfDPBottomUpApproach("04", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP bottom up approach, 05", new string[] {
                "DynamicProgrammingTopDown"}, SourceLine=10)]
        public virtual void AllScenariosOfDPBottomUpApproach_05()
        {
            this.AllScenariosOfDPBottomUpApproach("05", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        public virtual void AllScenariosOfDPTopDownApproach(string eggs, string floors, string minimumNumberOfSteps, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DynamicProgrammingBottomUp"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All scenarios of DP top down approach", @__tags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given(string.Format("{0}, {1} floors", eggs, floors), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.Then(string.Format("the result should {0}", minimumNumberOfSteps), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP top down approach, 01", new string[] {
                "DynamicProgrammingBottomUp"}, SourceLine=24)]
        public virtual void AllScenariosOfDPTopDownApproach_01()
        {
            this.AllScenariosOfDPTopDownApproach("01", "1,2,3,4,5", "1,2,3,4,5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP top down approach, 02", new string[] {
                "DynamicProgrammingBottomUp"}, SourceLine=24)]
        public virtual void AllScenariosOfDPTopDownApproach_02()
        {
            this.AllScenariosOfDPTopDownApproach("02", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP top down approach, 03", new string[] {
                "DynamicProgrammingBottomUp"}, SourceLine=24)]
        public virtual void AllScenariosOfDPTopDownApproach_03()
        {
            this.AllScenariosOfDPTopDownApproach("03", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP top down approach, 04", new string[] {
                "DynamicProgrammingBottomUp"}, SourceLine=24)]
        public virtual void AllScenariosOfDPTopDownApproach_04()
        {
            this.AllScenariosOfDPTopDownApproach("04", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("All scenarios of DP top down approach, 05", new string[] {
                "DynamicProgrammingBottomUp"}, SourceLine=24)]
        public virtual void AllScenariosOfDPTopDownApproach_05()
        {
            this.AllScenariosOfDPTopDownApproach("05", "1,2,3,4,5", "1,2,2,3,3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
